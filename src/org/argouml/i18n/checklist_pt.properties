# $Id $
# Based on checklist.properties,v 1.4.
# Copyright (c) 2005, 2006 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# Keys in the same order as in org.argouml.uml.cognitive.critics.Init
#
checklist.actor.encoding = Codificação
checklist.actor.encoding.break-into-parts = Será que <ocl>self</ocl> poderia \
        ser partida em duas ou mais classes?
checklist.actor.encoding.convert-to-attribute = Será que <ocl>self</ocl> deve \
		ser uma classe própria ou meramente um atributo de outra classe?
checklist.actor.encoding.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.actor.location = Localização
checklist.actor.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.actor.location.eliminates-or-affects-something-else = Existe alguma \
        outra classe no modelo que deva ser revista ou eliminada porque serve \
        o mesmo propósito que <ocl>self</ocl>?
checklist.actor.location.move-somewhere = Será que <ocl>self</ocl> poderia ser \
        definida numa localização diferente da hierarquia de classes?
checklist.actor.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.actor.naming = Nomenclatura
checklist.actor.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente a classe?
checklist.actor.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.actor.naming.misinterpret = Será possível que '<ocl>self</ocl>' \
        possa ser mal interpretada com outro significado qualquer?
checklist.actor.updates = Actualizações
checklist.actor.updates.affects-something-else = Existe algum outro objecto \
        que precisa de ser actualizado sempre que <ocl>self</ocl> é actualizado?
checklist.actor.updates.reasons-for-update = Porque razões uma instância de \
        <ocl>self</ocl> será actualizada?
checklist.actor.value = Valor
checklist.actor.value.convert-to-invariant = Consegue escrever uma invariante \
        para esta classe?
checklist.actor.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.actor.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.actor.value.start-with-meaningful-values = Todos os atributos de \
        <ocl>self</ocl> começam com valores com significado?
checklist.association.encoding = Codificação
checklist.association.encoding.break-into-parts = Será que <ocl>self</ocl> \
        poderia ser partida em duas ou mais classes?
checklist.association.encoding.convert-to-attribute = Será que <ocl>self</ocl> \
		deve ser uma classe própria ou meramente um atributo de outra classe?
checklist.association.encoding.do-just-one-thing = Será que <ocl>self</ocl> \
        faz exactamente uma coisa e fá-la bem?
checklist.association.location = Localização
checklist.association.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.association.location.eliminates-or-affects-something-else = Existe \
        alguma outra classe no modelo que deva ser revista ou eliminada porque \
        serve o mesmo propósito que <ocl>self</ocl>?
checklist.association.location.move-somewhere = Será que <ocl>self</ocl> \
        poderia ser definida numa localização diferente da hierarquia de \
        classes?
checklist.association.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.association.naming = Nomenclatura
checklist.association.naming.describe-clearly = Será que o nome \
        '<ocl>self</ocl>' descreve claramente a classe?
checklist.association.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou \
        uma frase substantivada?
checklist.association.naming.misinterpret = Será possível que \
        '<ocl>self</ocl>' possa ser mal interpretada com outro significado \
        qualquer?
checklist.association.updates = Actualizações
checklist.association.updates.affects-something-else = Existe algum outro \
        objecto que tem de ser actualizado sempre que <ocl>self</ocl> é \
        actualizado?
checklist.association.updates.reasons-for-update = Porque razões uma instância \
        de <ocl>self</ocl> será actualizada?
checklist.association.value = Valor
checklist.association.value.convert-to-invariant = Consegue escrever uma \
        invariante para esta classe?
checklist.association.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.association.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.association.value.start-with-meaningful-values = Todos os atributos \
        de <ocl>self</ocl> começam com valores com significado?
checklist.attribute.encoding = Codificação
checklist.attribute.encoding.allow-impossible-values = Será que o tipo \
        <ocl>self.type</ocl> permite valores para <ocl>self</ocl> que nunca \
        podem estar correctos?
checklist.attribute.encoding.break-into-parts = Será que <ocl>self</ocl> \
         poderia ser partido em duas ou mais partes (por exemplo, um número de \
         telefone pode ser partido em código de àrea, prefixo e número)?
checklist.attribute.encoding.combine-with-other = Podeira <ocl>self</ocl> ser \
        combinado com algum outro atributo de <ocl>self.owner</ocl> (por \
        exemplo, {owner.structuralFeature})?
checklist.attribute.encoding.is-computable = Poderia <ocl>self</ocl> ser \
        computado a partir de outros atributos em vez de armazenado?
checklist.attribute.encoding.is-too-restrictive = O tipo <ocl>self.type</ocl> \
        é muito restrictivo para representar todos os possíveis valores de \
        <ocl>self</ocl>?
checklist.attribute.location = Localização
checklist.attribute.location.could-be-eliminated = Poderia <ocl>self</ocl> ser \
        eliminado do modelo?
checklist.attribute.location.eliminates-or-affects-something-else = Existe \
        algum outro atributo no modelo que devia ser revisto ou eliminado \
        porque serve o mesmo propósito que <ocl>self</ocl>?
checklist.attribute.location.include-all = Será que <ocl>self</ocl> se aplica \
        a todas as intâncias de <ocl>self.owner</ocl> inclusive instâncias das \
        subclasses?
checklist.attribute.location.move-somewhere = Será que <ocl>self</ocl> poderia \
        ser definida numa classe diferente que está associada com \
        <ocl>self.owner</ocl>?
checklist.attribute.location.move-up-hierarchy = Poderia <ocl>self</ocl> ser \
        movido acima na hierarquia de herança para se aplicar a \
         <ocl>owner.name</ocl> e outras classes?
checklist.attribute.naming = Nomenclatura
checklist.attribute.naming.describe-clearly = Será que o nome \
        '<ocl>self</ocl>' descreve claramente o atributo?
checklist.attribute.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.attribute.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' pode ser mal interpretado com outro significado \
        qualquer?
checklist.attribute.updates = Actualizações
checklist.attribute.updates.affects-something-else = Existe algum outro \
        atributo que precisa de ser actualizado sempre que <ocl>self</ocl> é \
        actualizado?
checklist.attribute.updates.exists-method-for-specific-value = Existe algum \
        método que deva ser chamado quando <ocl>self</ocl> é afectado com um \
        determinado tipo de valor?
checklist.attribute.updates.exists-method-for-update = Existe algum método que \
        deva ser chamado quando <ocl>self</ocl> é actualizado?
checklist.attribute.updates.reasons-for-update = Porque motivos deve \
        <ocl>self</ocl> ser actualizado?
checklist.attribute.value = Valor
checklist.attribute.value.correct-default-value = O valor inicial de \
        <ocl>self.initialValue</ocl> é correcto?
checklist.attribute.value.default-value = Será que <ocl>self</ocl> devia ter \
        um valor inicial (ou por omissão)?
checklist.attribute.value.is-correctness-checkable = Consegue escrever uma \
        expressão para verificar se <ocl>self</ocl> está correcto? Plausível?
checklist.class.encoding = Codificação
checklist.class.encoding.break-into-parts = Será que <ocl>self</ocl> poderia \
        ser partida em duas ou mais classes?
checklist.class.encoding.convert-to-attribute = Será que <ocl>self</ocl> deve \
		ser uma classe própria ou meramente um atributo de outra classe?
checklist.class.encoding.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.class.location = Localização
checklist.class.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.class.location.eliminates-or-affects-something-else = Existe alguma \
        outra classe no modelo que deva ser revista ou eliminada porque serve \
        o mesmo propósito que <ocl>self</ocl>?
checklist.class.location.move-somewhere = Será que <ocl>self</ocl> poderia ser \
        definida numa localização diferente da hierarquia de classes?
checklist.class.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.class.naming = Nomenclatura
checklist.class.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente a classe?
checklist.class.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.class.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.class.updates = Actualizações
checklist.class.updates.affects-something-else = Existe algum outro objecto \
        que precisa de ser actualizado sempre que <ocl>self</ocl> é actualizado?
checklist.class.updates.reasons-for-update = Por que motivos seria uma \
        instância de <ocl>self</ocl> actualizada?
checklist.class.value = Valor
checklist.class.value.convert-to-invariant = Consegue escrever uma invariante \
        para esta classe?
checklist.class.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.class.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.class.value.start-with-meaningful-values = Todos os atributos de \
        <ocl>self</ocl> começam com valores com significado?
checklist.instance.actions = Acções
checklist.instance.actions.list-do-action = Que acção deve ser efectuada \
        enquanto em <ocl>self</ocl>?
checklist.instance.actions.list-entry-actions = Que acção deve ser efectuada \
        ao entrar em <ocl>self</ocl>?
checklist.instance.actions.list-exit-action = Que acção deve ser efectuada ao \
        sair de <ocl>self</ocl>?
checklist.instance.actions.maintained-state = Do state-actions maintain \
        <ocl>self</ocl> as the current state?
checklist.instance.actions.update-attribute-on-entry = Será que algum atributo \
        deveria ser actualizado ao entrar em <ocl>self</ocl>?
checklist.instance.actions.update-attribute-on-exit = Será que algum atributo \
        deveria ser actualizado ao sair de <ocl>self</ocl>?
checklist.instance.general = Geral
checklist.instance.general.describe-clearly = Será que o nome \
        '<ocl>self</ocl>' descreve claramente a classe?
checklist.instance.naming = Nomenclatura
checklist.instance.naming.denotes-state = Será que '<ocl>self</ocl>' denota \
        um estado em vez de uma actividade?
checklist.instance.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente a classe?
checklist.instance.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.instance.structure = Estrutura
checklist.instance.structure.belong = Does <ocl>self</ocl> belong in this \
        state machine or another?
checklist.instance.structure.break-into-parts = Será que <ocl>self</ocl> \
        poderia ser partido em dois ou mais estados?
checklist.instance.structure.can-write-characteristic-equation = Consegue \
		escrever uma equação característica para <ocl>self</ocl>?
checklist.instance.structure.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.instance.structure.is-state-in-another-machine-exclusive = Existe \
        algum estado noutra máquina exclusiva com <ocl>self</ocl>?
checklist.instance.structure.make-internal = Será que <ocl>self</ocl> devia \
        ser um estado inicial?
checklist.instance.structure.merged-with-other = Será que <ocl>self</ocl> \
        devia ser um estado próprio ou poderia ser incorporado nem outro estado?
checklist.instance.transitions = Transições
checklist.instance.transitions.are-transitions-out-of-exclusive = Cada \
        transição de saída é exclusiva?
checklist.instance.transitions.combine-with-other-incoming = Será que algumas \
        transições de entrada podiam ser combinadas?
checklist.instance.transitions.combine-with-other-outgoing = Será que algumas \
        transições de saída podiam ser combinadas?
checklist.instance.transitions.need-another-transition-into = Será que devia \
        existir outra transição para <ocl>self</ocl>?
checklist.instance.transitions.need-another-transition-out-of = Será que devia \
        existir outra transição de <ocl>self</ocl>?
checklist.instance.transitions.use-all-transitions-into = Será que todas as \
        transições para <ocl>self</ocl> podem ser utilizadas?
checklist.instance.transitions.use-all-transitions-out-of = Será que todas as \
        transições de <ocl>self</ocl> podem ser utilizadas?
checklist.interface.encoding = Codificação
checklist.interface.encoding.break-into-parts = Será que <ocl>self</ocl> \
        poderia ser partida em duas ou mais classes?
checklist.interface.encoding.convert-to-attribute = Será que <ocl>self</ocl> \
		deve ser uma classe própria ou meramente um atributo de outra classe?
checklist.interface.encoding.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.interface.location = Localização
checklist.interface.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.interface.location.eliminates-or-affects-something-else = Existe \
        alguma outra classe no modelo que deva ser revista ou eliminada porque \
        serve o mesmo propósito que <ocl>self</ocl>?
checklist.interface.location.move-somewhere = Será que <ocl>self</ocl> poderia \
        ser definida numa localização diferente da hierarquia de classes?
checklist.interface.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.interface.naming = Nomenclatura
checklist.interface.naming.describe-clearly = Será que o nome \
        '<ocl>self</ocl>' descreve claramente a classe?
checklist.interface.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.interface.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.interface.updates = Actualizações
checklist.interface.updates.affects-something-else = Existe algum outro \
        objecto que precisa de ser actualizado sempre que <ocl>self</ocl> é \
        actualizado?
checklist.interface.updates.reasons-for-update = Por que motivos seria uma \
        instância de <ocl>self</ocl> actualizada?
checklist.interface.value = Valor
checklist.interface.value.convert-to-invariant = Consegue escrever uma \
        invariante para esta classe?
checklist.interface.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.interface.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.interface.value.start-with-meaningful-values = Todos os atributos de \
        <ocl>self</ocl> começam com valores com significado?
checklist.link.encoding = Codificação
checklist.link.encoding.break-into-parts = Será que <ocl>self</ocl> poderia \
        ser partida em duas ou mais classes?
checklist.link.encoding.convert-to-attribute = Será que <ocl>self</ocl> deve \
		ser uma classe própria ou meramente um atributo de outra classe?
checklist.link.encoding.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.link.location = Localização
checklist.link.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.link.location.eliminates-or-affects-something-else = Existe alguma \
        outra classe no modelo que deva ser revista ou eliminada porque serve \
        o mesmo propósito que <ocl>self</ocl>?
checklist.link.location.move-somewhere = Será que <ocl>self</ocl> poderia ser \
        definida numa localização diferente da hierarquia de classes?
checklist.link.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.link.naming = Nomenclatura
checklist.link.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente a classe?
checklist.link.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.link.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.link.updates = Actualizações
checklist.link.updates.affects-something-else = Existe algum outro objecto \
        que precisa de ser actualizado sempre que <ocl>self</ocl> é actualizado?
checklist.link.updates.reasons-for-update = Por que motivos seria uma \
        instância de <ocl>self</ocl> actualizada?
checklist.link.value = Valor
checklist.link.value.convert-to-invariant = Consegue escrever uma invariante \
        para esta classe?
checklist.link.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.link.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.link.value.start-with-meaningful-values = Todos os atributos de \
        <ocl>self</ocl> começam com valores com significado?
checklist.operation.encoding = Codificação
checklist.operation.encoding.break-into-parts = Será que <ocl>self</ocl> \
        podia ser partido em duas ou mais partes (por exemplo, \
        pre-processamento, processamento principal, e pós-processamento)?
checklist.operation.encoding.break-into-series = Será que <ocl>self</ocl> \
        podia ser subsituida por uma série de chamadas cliente para operações \
        mais simples?
checklist.operation.encoding.combine-with-other = Será que <ocl>self</ocl> \
        podia ser combinada com outra operação de <ocl>self.owner</ocl> (e.g., \
        <ocl sep=', '>self.owner.behavioralFeature</ocl>)?
checklist.operation.encoding.does-returntype-allow-impossible-values = \
        '<ocl>self.returnType</ocl>' permite valores de retorno que nunca \
        podem estar correctos?
checklist.operation.encoding.is-returntype-too-restrictive = O tipo de retorno \
        de '<ocl>self.returnType</ocl>' é muito restritivo para representar \
        todos os valores possíveis retornados por <ocl>self</ocl>?
checklist.operation.encoding.reduce-number-of-calls = Será que <ocl>self</ocl> \
        podia ser combinada com outras operações para reduzir o número de \
        que os clientes têm de fazer?
checklist.operation.location = Localização
checklist.operation.location.could-be-eliminated = Poderia <ocl>self</ocl> ser \
        eliminado do modelo?
checklist.operation.location.eliminates-or-affects-something-else = Existe \
        alguma outra classe no modelo que deva ser revista ou eliminada porque \
        serve o mesmo propósito que <ocl>self</ocl>?
checklist.operation.location.include-all = Será que <ocl>self</ocl> se aplica \
        a todas as instâncias da classe <ocl>self.owner</ocl>, incluíndo \
        instâncias das sub-classes?
checklist.operation.location.move-somewhere = Será que <ocl>self</ocl> podia \
        ser definida numa classe diferente que está associada com \
        <ocl>self.owner</ocl>?
checklist.operation.location.move-up-hierarchy = Poderia <ocl>self</ocl> ser \
        movido acima na hierarquia de herança para se aplicar a \
         <ocl>owner.name</ocl> e outras classes?
checklist.operation.naming = Nomenclatura
checklist.operation.naming.describe-clearly = Será que o nome \
        '<ocl>self</ocl>' descreve claramente a operação?
checklist.operation.naming.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.operation.naming.is-verb = Será '<ocl>self</ocl>' um verbo ou uma \
        frase verbal?
checklist.operation.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.operation.value = Valor
checklist.operation.value.are-special-cases = Existem casos especiais de \
        entrada de dados que devam ser tratados separadamente?
checklist.operation.value.express-postconditions-possible = Consegue expressar \
        as pós-condições de <ocl>self</ocl>?
checklist.operation.value.express-preconditions-possible = Consegue expressar \
        as pré-condições de <ocl>self</ocl>?
checklist.operation.value.handle-all-inputs = Será que <ocl>self</ocl> \
        encarregar-se de todos os possíveis valores de entrada?
checklist.operation.value.how-behave-postconditions-not-achieved = Como é que \
        <ocl>self</ocl> se comporta se as pós-condições não consegue ser \
        alcançadas?
checklist.operation.value.how-behave-preconditions-violated = Como é que \
        <ocl>self</ocl> se comporta se as pré-condições são violadas?
checklist.operation.value.is-correctness-checkable = Consegue escrever uma \
        expressão para verificar se os argumentos de <ocl>self</ocl> estão \
        correctos? Plausíveis?
checklist.state.actions = Acções
checklist.state.actions.list-do-action = Que acção deve ser efectuada enquanto \
        em <ocl>self</ocl>?
checklist.state.actions.list-entry-actions = Que acção deve ser efectuada ao \
        entrar em <ocl>self</ocl>?
checklist.state.actions.list-exit-action = Que acção deve ser efectuada ao \
        sair de <ocl>self</ocl>?
checklist.state.actions.maintained-state = Do state-actions maintain \
        <ocl>self</ocl> as the current state?
checklist.state.actions.update-attribute-on-entry = Será que algum atributo \
        deveria ser actualizado ao entrar em <ocl>self</ocl>?
checklist.state.actions.update-attribute-on-exit = Será que algum atributo \
        deveria ser actualizado ao sair de <ocl>self</ocl>?
checklist.state.naming = Nomenclatura
checklist.state.naming.denotes-state = Será que '<ocl>self</ocl>' denota \
        um estado em vez de uma actividade?
checklist.state.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente o estado?
checklist.state.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.state.structure = Estrutura
checklist.state.structure.belong = <ocl>self</ocl> pertence a esta máquina de \
        estados ou a outra?
checklist.state.structure.break-into-parts = Será que <ocl>self</ocl> poderia \
        ser partido em dois ou mais estados?
checklist.state.structure.can-write-characteristic-equation = Consegue \
		escrever uma equação característica para <ocl>self</ocl>?
checklist.state.structure.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.state.structure.is-state-in-another-machine-exclusive = Existe algum \
        estado noutra máquina de estados que seja exclusivo com <ocl>self</ocl>?
checklist.state.structure.make-internal = Será que <ocl>self</ocl> devia ser \
        um estado inicial?
checklist.state.structure.merged-with-other = Será que <ocl>self</ocl> devia \
        ser um estado próprio ou poderia ser incorporado nem outro estado?
checklist.state.transitions = Transições
checklist.state.transitions.are-transitions-out-of-exclusive = Cada transição \
        de saída é exclusiva?
checklist.state.transitions.combine-with-other-incoming = Será que algumas \
        transições de entrada podiam ser combinadas?
checklist.state.transitions.combine-with-other-outgoing = Será que algumas \
        transições de saída podiam ser combinadas?
checklist.state.transitions.need-another-transition-into = Será que devia \
        existir outra transição para <ocl>self</ocl>?
checklist.state.transitions.need-another-transition-out-of = Será que devia \
        existir outra transição de <ocl>self</ocl>?
checklist.state.transitions.use-all-transitions-into = Será que todas as \
        transições para <ocl>self</ocl> podem ser utilizadas?
checklist.state.transitions.use-all-transitions-out-of = Será que todas as \
        transições de <ocl>self</ocl> podem ser utilizadas?
checklist.transition.actions = Acções
checklist.transition.actions.is-postcondition-consistant-with-destination = \
        Será que a pós-condição da acção é consistente com o destino?
checklist.transition.actions.is-precondition-met = Será que a pré-condição da \
        acção sempre atingida?
checklist.transition.actions.should-have = Será que esta transição devia ter \
        uma acção?
checklist.transition.actions.should-have-entry = Será que a acção desta \
        transição devia ser uma acção de entrada?
checklist.transition.actions.should-have-exit = Será que a acção desta \
        transição devia ser uma acção de saída?
checklist.transition.guard = Guarda
checklist.transition.guard.break-into-parts = Será que poderia ser partido em \
        duas ou mais transições?
checklist.transition.guard.is-too-restrictive = A condição de transição será \
        muito restritiva?
checklist.transition.guard.taken-too-often = Será que esta transição é \
        percorrida com demasiada frequência?
checklist.transition.structure = Estrutura
checklist.transition.structure.end-somewhere-else = Será que esta transição \
        devia terminar num destino diferente?
checklist.transition.structure.need-another-like-this = Será que devia existir \
        outra transiçãi \"como\" esta?
checklist.transition.structure.start-somewhere-else = Será que esta transição \
        devia começar numa origem diferente?
checklist.transition.structure.unneeded-because-of-this = Existe outra \
        transição desnecessária por causa desta?
checklist.transition.trigger = Trigger
checklist.transition.trigger.happen-too-often = Será que o disparador ocorre \
        com muita frequência?
checklist.transition.trigger.happen-too-rarely = Será que o disparador \
        raramente ocorre?
checklist.transition.trigger.needed = Esta transição precisa de um disparador?
checklist.usecase.encoding = Codificação
checklist.usecase.encoding.break-into-parts = Será que <ocl>self</ocl> poderia \
        ser partida em duas ou mais classes?
checklist.usecase.encoding.convert-to-attribute = Será que <ocl>self</ocl> \
		deve ser uma classe própria ou meramente um atributo de outra classe?
checklist.usecase.encoding.do-just-one-thing = Será que <ocl>self</ocl> faz \
        exactamente uma coisa e fá-la bem?
checklist.usecase.location = Localização
checklist.usecase.location.eliminate-from-model = <ocl>self</ocl> pode ser \
        eliminada do modelo?
checklist.usecase.location.eliminates-or-affects-something-else = Existe \
        alguma outra classe no modelo que deva ser revista ou eliminada porque \
        serve o mesmo propósito que <ocl>self</ocl>?
checklist.usecase.location.move-somewhere = Será que <ocl>self</ocl> poderia \
        ser definida numa localização diferente da hierarquia de classes?
checklist.usecase.location.planned-subclasses = Planeou ter subclasses de \
        <ocl>self</ocl>?
checklist.usecase.naming = Nomenclatura
checklist.usecase.naming.describe-clearly = Será que o nome '<ocl>self</ocl>' \
        descreve claramente a classe?
checklist.usecase.naming.is-noun = '<ocl>self</ocl>' é um substantivo ou uma \
        frase substantivada?
checklist.usecase.naming.misinterpret = Será possível que o nome \
        '<ocl>self</ocl>' possa ser mal interpretado com outro significado \
        qualquer?
checklist.usecase.updates = Actualizações
checklist.usecase.updates.affects-something-else = Existe algum outro objecto \
        que precisa de ser actualizado sempre que <ocl>self</ocl> é actualizado?
checklist.usecase.updates.reasons-for-update = Por que motivos seria uma \
        instância de <ocl>self</ocl> actualizada?
checklist.usecase.value = Valor
checklist.usecase.value.convert-to-invariant = Consegue escrever uma \
        invariante para esta classe?
checklist.usecase.value.establish-invariant-in-constructors = Todos os \
        constructores estabelecem a invariante da classe?
checklist.usecase.value.maintain-invariant = Todas as operações mantêm a \
        invariante da classe?
checklist.usecase.value.start-with-meaningful-values = Todos os atributos de \
        <ocl>self</ocl> começam com valores com significado?
