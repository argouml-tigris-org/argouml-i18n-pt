# $Id$
# Based on critics.properties,v 1.14.
# Copyright (c) 2005, 2006 The Regents of the University of California. All
# Rights Reserved. Permission to use, copy, modify, and distribute this
# software and its documentation without fee, and without a written
# agreement is hereby granted, provided that the above copyright notice
# and this paragraph appear in all copies.  This software program and
# documentation are copyrighted by The Regents of the University of
# California. The software program and documentation are supplied "AS
# IS", without any accompanying services from The Regents. The Regents
# does not warrant that the operation of the program will be
# uninterrupted or error-free. The end-user understands that the program
# was developed for research purposes and is advised not to rely
# exclusively on the program for any reason.  IN NO EVENT SHALL THE
# UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
# UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
# Created from UMLCognitiveResourceBundle.java
#
# The keys are generated from the class names of the classes that use them.
#
critics.CrAlreadyRealizes-desc = A classe seleccionada já concretiza \
        indirectamente a Interface {item.extra}.  Não há necessidade de \
        realizar directamente outra vez.\n\nSimplificar o Desenho é sempre boa \
        ideia. Pode ignorar este item \"por fazer\" se quiser tornar explicito \
        de que a Classe selecionada realiza esta Interface.\n\nPara resolver \
        isto , selecione a Realização (linha tracejada com seta triangular \
        branca) e pressione a combinação de teclas \"Ctrl-Delete\".
critics.CrAlreadyRealizes-head = Remova Realizações desnecessárias de \
        <ocl>self</ocl>
critics.CrAssocNameConflict-desc = Cada elemento de um espaço de nomes tem de \
        um nome único. \n\nNomemclatura clara e não ambígua é o elemento chave \
        da geração de código e torna o desenho muito mais compreensível e \
        fácil de manter. \n\nPara resolver isto, use o botão \"Próximo>\", ou \
        seleccione manualmente os elementos e use o separador das Propriedades \
        para mudar os seus nomes.
critics.CrAssocNameConflict-head = Resolva Conflito de Nome de Associação
critics.CrAttrNameConflict-desc = Os atributos têm de ter nomes distintos. \
        Esta crítica pode ter sido dispoletada como resultado de um nome de \
        atributo herdado. \n\nCNomemclatura clara e não ambígua é o elemento \
        chave da geração de código e torna o desenho muito mais compreensível \
        e fácil de manter. \n\nPara resolver isto, use o botão \"Próximo>\", \
        ou seleccione manualmente um dos atributos em conflito desta classe e \
        mude o seu nome.
critics.CrAttrNameConflict-head = Reveja os Nomes de Atributos para Evitar \
        Conflito
critics.CrCallWithoutReturn-desc = Cada chamada ou acção de envio requere uma \
        acção de retorno,\n mas esta Ligação não tem nenhuma acção de retorno.
critics.CrCallWithoutReturn-head = Acções de Retorno em Falta
critics.CrCircularAssocClass-desc = Classes Associativas não podem incluír \
        papeis que referem directamente de volta à Classe Associativa.
critics.CrCircularAssocClass-head = Associação Circular
critics.CrCircularComposition-desc = Relações de Composição (losangulos \
        pretos) não podem ter ciclos. \n\nUma hierarquia de agregação legal \
        é necessária para a geração de código e correcção do desenho. \n\nPara \
        resolver isto, use o botão \"Próximo>\", ou seleccione manualmente uma \
        das associações no ciclo e remova-a ou mude a sua agregação para algo \
        que não seja composto.
critics.CrCircularComposition-head = Remova Composição Circular
critics.CrCircularInheritance-desc = Relações de Herança não podem ter ciclos \
        \n\nUma hierarquia de heranças legal é necessária para a geração de \
        código e correcção do desenho.
critics.CrCircularInheritance-head = Remova a Herança Circular de \
        <ocl>self</ocl>
critics.CrClassMustBeAbstract-desc = Classes que incluam ou herdem métodos \
        abstractos de classes base ou interfaces têm de estar marcadas como \
        abstractas. \n\nDecidir que classes são abstractas ou concretas é uma \
        parte chave do desenho de hierarquias de classes.\n\nPara corrigir \
        isto, use o botão \"Próximo>\" , ou seleccione manualmente a classe e \
        use o separador de propriedades para adicionar palavra-chave \
        Abstracta, ou implemente manualmente cada operação abstracta que é \
        herdada da classe base ou interface.
critics.CrClassMustBeAbstract-head = A Classe <ocl>self</ocl> Tem De Ser \
        Abstracta
critics.CrClassWithoutComponent-desc = Em Diagramas de Instalação as classes \
        estão normalmente dentro de componentes.
critics.CrClassWithoutComponent-head = As Classes Normalmente Estão Dentro de \
        Componentes
critics.CrCompInstanceWithoutNode-desc = Existem instancias de nós no \
        Diagrama. Assim, tem um Diagrama de Instaçação real, e nestes as \
        instâncias de componentes geralmente residem em instâncias de nós.
critics.CrCompInstanceWithoutNode-head = Instâncias de Componentes \
        Encontram-se Normalmente Dentro De Nós
critics.CrComponentWithoutNode-desc = Existem nós no diagrama. Portanto, \
        tem um Diagrama de Instalação real, e nestes os componentes \
        os componentes normalmente residem nos nós.
critics.CrComponentWithoutNode-head = Os Componentes Normalmente Estão Dentro \
        Dos Nós
critics.CrConflictingComposites-desc = Um papel composto (losangulo preto) \
        de uma associação indica que as instâncias daquela classe contêm \
        instâncias das classes associadas. Uma vez que cada instância só pode \
        estar contida num único objecto, cada objecto pode ser 'parte' de no \
        máximo uma relação é-parte-de.\n\nUm bom desenho OO depende da \
        construção de boas relações é-parte-de.\n\nPara resolver isto, use o \
        botão \"Próximo>\", ou mude manualmente uma associação de modo a ter \
        multiplicidade 0..1 ou 1..1, ou outro tipo de agregação (por exemplo, \
        um losangulo branco é menos restrito), ou remova uma das associações.
critics.CrConflictingComposites-head = Remova Associaçõe Compostas em Conflito
critics.CrConsiderSingleton-desc = <ocl>self</ocl> não tem nenhum atributo \
        não estático nem nenhuma associação que seja navegável a partir das \
        instâncias desta classe. Isto signigica que cada instância desta \
        classe será idêntica a todas as outras instâncias, uma vez que não \
        existirá nada nas instâncias que as diferencie.\n\nNestas \
        circunstâncias deve considerar tornar explicito de que tem exactamente \
        uma única instância desta classe, através do Padrão Singleton. \
        Utilizando o Padrão Singleton pode salvar tempo e espaço de \
        memória. Dentro do ArgoUML is pode ser feito através do estereótipo \
        <<singleton>> nesta classe.\n\nSe não é a sua intenção ter uma única \
        instância, deve definir variáveis de instância (isto é, atributos não \
        estáticos) e/ou associação de saída que irão representar diferenças \
        entre as instâncias. \n\nTendo especificado <ocl>self</ocl> como \
        Singleton, precisa de definir a classe de modo a que só exista uma \
        única instância. Isto irá completar a parte de representação de \
        informação do seu desenho. Para obter isto deverá fazer o seguinte.\n\n\
        1. Defina um atributo estático (uma variável de classe) que contenha a \
        instância. Isto terá portanto <ocl>self</ocl> como tipo.\n\n2. \
        Providencie só constructores privados para <ocl>self</ocl> de modo a \
        que novas instâncias não possam ser feitas por outro código. A criação \
        de uma única instância podia ser obtida através de uma operação \
        ajudante apropriada, que invoca este constructor privado só uma vez. \n\
        \n3. Providencie pelo menos um constructor para sobrepôr o constructor \
        por omissão, de modo a que o constructor por omissão não seja usado \
        para criar multiplas instancias.\n\nNo padrão UML 1.4, um constructor \
        é uma operação com o estereótipo <<create>>.\n\nPor convenção em Java \
        e C++ um constructor tem o mesmo nome que a classea, não é estático, \
        e não retorna nenhum valor. Note que no ArgoUML isto significa que \
        terá de remover o valor de retorno criado por omissão para a operação \
        de constructor.
critics.CrConsiderSingleton-head = Considere Utilizar o Padrão Singleton para \
        <ocl>self</ocl>
critics.CrConstructorNeeded-desc = Ainda não definiu um constructor para a \
        classe <ocl>self</ocl>. Os constructores inicializam novas instâncias \
        de modo a que os seus atributos tenham valores válidos. Provavelmente \
        esta classe precisa de um constructor porque nem todos os seus \
        atributos têm valores iniciais.\n\nDefinir bons constructores é a \
        chave para estabelecer invariantes de classe , e estas são uma ajuda \
        poderosa para escrever código sólido .\n\nPara resolver isto, adicione \
        um constructor manualmente clicando em <ocl>self</ocl> no pane do \
        navegador e adicionando uma operação através do menu pop-up sensível a \
        contexto no separador das propriedades, ou seleccionando \
        <ocl>self</ocl> onde apareça num diagrama de classes e usando a \
        ferramenta \"Adicionar Operação\". Depois use o separador Propriedades \
        no pane Detalhes para seleccionar o estereótipo <<create>> na \
        operação.\n\nUm constructor é uma operação com o estereótipo <<create>>.
critics.CrConstructorNeeded-head = Adicione Constructor a <ocl>self</ocl>
critics.CrCrossNamespaceAssoc-desc = Cada classe, interface ou outro \
        classificador (<ocl>self</ocl>) involvido numa associação deve estar \
        no nome de espaços da associação.\n\nSe não for este o caso, então não \
        haverá maneira das classes, interfaces ou outros classificadores \
        nomearem a referência uns dos outros usando a associação.\n\nNote que \
        esta crítica presentemente não interpreta nomes de espaços \
        hierárquicos. Assim, irá disparar se os componentes finais dos nomes \
        de espaços são diferentes, mesmo que partilhem uma raíz comum, e esta \
        crítica dessa ser interpretada tendo isso em conta.\n\nPara resolver \
        isto, apague a associação e volte a criá-la num diagrama cujo nome de \
        espaços inclua as classes, interfaces e classificadores involvidos.
critics.CrCrossNamespaceAssoc-head = O Classificador <ocl>self</ocl> não está \
        no Nome de Espaços da sua Associação
critics.CrDisambigClassName-desc = Cada classe e interface dentro de um pacote \
        têm de ter um nome único. Existem pelo menos dois elementos neste \
        pacote chamados \"<ocl>self</ocl>\".\n\nNomemclatura clara e não \
        ambígua é um elemento chave na geração de código e torna o desenho \
        mais compreensível e fácil de manter. \n\nPara resolver isto, use o \
        botão \"Próximo>\", ou seleccione manualmente uma das classes em \
        conflito e use o separador Propriedades para mudar os seus nomes.
critics.CrDisambigClassName-head = Escolha um Nome Único para <ocl>self</ocl>
critics.CrDisambigStateName-desc = Cada estado dentro de uma máquina de \
        estados tem de ter um nome único. Existem pelo menos dois estados \
        nesta máquina com o nome \"<ocl>self</ocl>\".\n\nNomemclatura clara e \
        não ambígua é um elemento chave na geração de código e torna o desenho \
        mais compreensível e fácil de manter. \n\nPara resolver isto, use o \
        botão \"Próximo>\", ou seleccione manualmente um dos estados em \
        conflito e use o separador \"Propriedades\" para mudar os seus nomes.
critics.CrDisambigStateName-head = Escolha um Nome Único para <ocl>self</ocl>
critics.CrDupParamName-desc = Cada parâmetro numa operação tem de ter um nome \
        único. \n\nNomemclatura limpa e não ambígua é necessária para a \
        geração de código e para obter desenhos claros e fáceis de manter.\n\n\
        Para resolver isto, use o botão \"Próximo>\", ou mude manualmente o \
        nome de um dos parâmetros desta operação.
critics.CrDupParamName-head = Nome de Parâmetro duplicado
critics.CrDupRoleNames-desc = A Associação <ocl>self</ocl> tem dois (ou mais) \
        papeis com o mesmo nome.\n\nNomemclatura clara e não ambígua é um \
        elemento chave na geração de código e torna o desenho mais \
        compreensível e fácil de manter.\n\nPara resolver isto seleccione \
        <ocl>self</ocl> manualmente e use o separador das Propriedades para \
        mudar um ou mais dos nomes de papeis em conflito.
critics.CrDupRoleNames-head = Nomes de Papeis de Fim duplicados para \
        <ocl>self</ocl>
critics.CrEmptyPackage-desc = Ainda não colocou nada no pacote <ocl>self</ocl>.\
         Normalmente os pacotes contêm grupos de classes relacionadas.\n\n\
        Definir e usar pacote é um elemento chave do desenho viável de manter.\
        \n\nPara resolver isto, seleccione o pacote <ocl>self</ocl> no painel\
        navegador e adicione diagramas ou elementos de modelo tais como \
        classes ou casos de utilização.
critics.CrEmptyPackage-head = Adicione Elementos ao Pacote <ocl>self</ocl>
critics.CrFinalSubclassed-desc = A palavra chave 'leaf' indica que a classe \
        não é suposto ter sub-classes. Esta classe ou interface está marcada \
        como 'leaf' e tem sub-classes.\n\nUma hierarquia de classes bem \
        estruturada que contempla e suporta extensão intencionais é uma parte \
        importante para obter um desenho compreensivel e fácil de manter.\n\n\
        Para resolver isto, use o botão \"Próximo>\", ou seleccione \
        manualmente a classe e mude a sua classe base, ou seleccione a classe \
        basee use o separador das propriedades para remover a palavra-chave \
        'leaf'.
critics.CrFinalSubclassed-head = Remova a Palavra-chave 'Leaf' ou Remova \
        Sub-classes de <ocl>self</ocl>
critics.CrForkOutgoingTransition-desc = A fonte de <ocl>self</ocl> é um \
        Pseudo-estado de Difusão, mas o seu alvo não é um Estado. Um segmento \
        de difusão deve sempre ter como alvo um estado.\n\nÉ necessário \
        definir transições válidas para completar a especificação \
        comportamental do seu desenho.\n\nPara corrigir isto, carregue em \
        remover esta transição clicando na transição do diagrama e carregando \
        em \"Ctrl-Delete\". Também pode mudar a fonte dos estados de transição \
        ou destino.
critics.CrForkOutgoingTransition-head = Alvo inválido para transição
critics.CrIllegalGeneralization-desc = Elementos de modelo só podem ser \
        herdados por outros do mesmo tipo. \n\nUm hierarquia de herança válida \
        é necessária para geração de código e correcção do desenho. \n\nPara \
        resolver isto, use o botão \"Próximo>\", ou seleccione manualmente a \
        seta de generalização e remova-a.
critics.CrIllegalGeneralization-head = Generalização Inválida
critics.CrIllegalName-desc = Os nomes de elementos do modelo têm de ser \
        sequências de letras, numeros, e underscores. Não podem conter \
        pontuação. \n\nA geração de código requere nomes válidos para que o \
        código resultante compile correctamente. \n\nPara resolver isto, \
        seleccione manualmente o elemento em foco e o use o separador \
        Propriedades para lhe dar um nome diferente.
critics.CrIllegalName-head = Escolha um Nome Válido para <ocl>self</ocl>
critics.CrInstanceWithoutClassifier-desc = Instâncias têm um classificador.
critics.CrInstanceWithoutClassifier-head = Defina o Classificador
critics.CrInterfaceAllPublic-desc = As interfaces têm como objectivo \
        especificar o conjunto de operações que as outras classes devem \
        implementar. Têm de ser públicas. \n\nUm conjunto bem desenhado de \
        interfaces é uma boa maneira para definir possíveis extensões a uma \
        infraestrutura de classes. \n\nPara resolver isto, use o botão \
        \"Próximo>\", ou seleccione manualmente as operações da interface e \
        use o separador Propriedades para torná-las públicas.
critics.CrInterfaceAllPublic-head = Operações em Interfaces têm de ser Públicas
critics.CrInterfaceOperOnly-desc = As interfaces têm como objectivo \
        especificar o conjunto de operações que as outras classes devem \
        implementar. Não implementam essas operações propriamente ditas, e não \
        ter atributos. \n\nUm conjunto bem desenhado de interfaces é uma boa \
        maneira para definir possíveis extensões a uma infraestrutura de \
        classes. \n\nPara resolver isto, use o botão \"Próximo>\", ou \
        seleccione manualmente a interface e use o separador Propriedades para \
        remover todos os atributos.
critics.CrInterfaceOperOnly-head = Interfaces só podem ter Operações
critics.CrInterfaceWithoutComponent-desc = Em diagramas de instalação, as \
        interfaces encontram-se normalmente dentro dos componentes.
critics.CrInterfaceWithoutComponent-head = Interfaces estão normalmente dentro \
        de Componentes
critics.CrInvalidBranch-desc = Este estado branch (escolha or junção) tem um \
        número inválido de transições. Normalmente estados branch têm pelo \
        menos uma transição de entrada e pelo menos uma transição de saída. \n\
        \nÉ necessário definir transições de estado correctas de modo a \
        completar a especificação comportamentas do seu desenho. \n\nPara \
        resolver isto, adicione transições através da ferramenta de transições.
critics.CrInvalidBranch-head = Adicione Transições de Escolha/Junção
critics.CrInvalidFork-desc = Este estado de difusão tem um número inválido de \
        transições. Normalmente estados de difusão têm uma transição de \
        entrada e duas ou mais de saída . \n\nÉ necessário definir transições \
        de estado correctas de modo a completar a especificação comportamental \
        do seu desenho. \n\nPara resolver isto, adicione ou remova transições \
        manualmente.
critics.CrInvalidFork-head = Mude as Transições de Difusão
critics.CrInvalidForkTriggerOrGuard-desc = A Transição em foco não deve ter um \
        disparador ou condição de guarda porque é uma transição de saída de um \
        Pseudo-estado de Difusão. As transições que saem de um vértice de \
        difusão não podem ter disparadores ou condições de guarda.\n\nÉ \
        necessário definir transições válidas de modo a completar a \
        corrigir isto, remova o disparador selecionado-o no pane explorador e \
        especificação comportamental do seu desenho.\n\nPara removendo-o do \
        modelo através do menu obtido com um clique direito no rato. Ou, no \
        caso de uma condição de guarda, remova-a com um duplo clique no campo \
        de condição de guarda da transição e carregando em \"Ctrl-Delete\".
critics.CrInvalidForkTriggerOrGuard-head = Remova Disparador ou Condição de \
        Guarda da Transição de Saída Difusa
critics.CrInvalidHistory-desc = Este estado História tem um número inválido \
        de transições. Normalmente os estados de História Superficial e \
        História Profunda têm no máximo um transição de saída. \n\nÉ \
        necessário definir transições de estado correctas de modo a completar \
        a especificação comportamental do seu desenho. \n\nPara corrigir isto, \
        remova transições clicando na transição no diagrama e carregando em \
        \"Ctrl-Delete\".
critics.CrInvalidHistory-head = Remova Transições de Saída a mais
critics.CrInvalidInitial-desc = Este estado inicial tem um número inválido de \
        transições. Normalmente estados iniciais têm no máximo uma transição \
        de saída.\n\nÉ necessário definir transições válidas de modo a \
        completar a especificação comportamental do seu desenho. \n\nPara \
        corrigir isto, remova transições clicando na transição no diagrama e \
        carregando em \"Ctrl-Delete\".
critics.CrInvalidInitial-head = Remova Transições de Saída a mais
critics.CrInvalidJoin-desc = Este estado de junta tem um número inválido de \
        transições. Normalmente estados de junta têm duas ou mais transições \
        de entrada e uma transição de saída. \n\nÉ necessário definir \
        transições de estado correctas de modo a completar a especificação \
        comportamental do seu desenho. \n\nPara  resolver isto, adicione ou \
        remova transições manualmente.
critics.CrInvalidJoin-head = Mude Transições de Junta
critics.CrInvalidJoinTriggerOrGuard-desc = A transição em foco não deve ter um \
        disparador ou condição de guarda porque é uma transição de entrada de \
        um Pseudo-estado de Junta. As transições que entram num vértice de \
        junta não devem ter disparadores ou condições de guarda.\n\nÉ \
        necessário definir transições de estado correctas de modo a completar \
        a especificação comportamental do seu desenho.\n\nPara corrigir isto, \
        remova o disparador selecionando-o no pane explorador e removendo-o do \
        modelo com o menu de clique direito no rato. Ou, no caso de uma \
        condição de guarda, remova-a com um duplo clique no campo de condição \
        de guarda da transição e carregando em \"Ctrl-Delete\".
critics.CrInvalidJoinTriggerOrGuard-desc = The highlighted Transition should \
        not have a trigger or guard because it is a Join PseudoState's \
        incoming transition.  The transitions entering a join vertex must not \
        have triggers or guards.\n\nDefining valid transitions is needed to \
        complete the behavioral specification part of your design.\n\nTo fix \
        this, remove trigger by selecting it in the explorer pane and removing \
        it from model with the right-click mouse menu. Or, in case of a guard, \
        remove it by double clicking in the transition's guard field and \
        pressing the \"Ctrl-Delete\" key.
critics.CrInvalidJoinTriggerOrGuard-head = Remove Trigger or Guard from Join \
        Incoming Transition
critics.CrInvalidPseudoStateTrigger-desc = The highlighted Transition should \
        not have a trigger because it is a PseudoState's outgoing transition.  \
        The transitions outgoing a pseudostate may not have \
        triggers.\n\nDefining valid transitions is needed to complete the \
        behavioral specification part of your design.\n\nTo fix this, remove \
        the trigger by selecting it in the explorer or properties pane and \
        removing it from model with the right-click mouse menu.
critics.CrInvalidPseudoStateTrigger-head = Remove Trigger from PseudoState's \
        Outgoing Transition
critics.CrInvalidSynch-desc = This synch state has invalid transitions. \
        Normally all incoming transitions to a synch state come from the same \
        region and all outgoing transitions from a synch state go to the same \
        region. Additionally, transitions source and destination states' \
        containers must be concurrent regions.\n\nDefining correct state \
        transitions is needed to complete the  behavioral specification part \
        of your design.  \n\nTo fix this, remove transitions by clicking on \
        the transition in the diagram and pressing the \"Ctrl-Delete\" key. \
        You can also change the transition's source or destination states.
critics.CrInvalidSynch-head = Change Synch State Transitions
critics.CrJoinIncomingTransition-desc = The target of <ocl>self</ocl> is a \
        Join Pseudostate but its source is not a State. A join segment should \
        always originate from a state.\n\nDefining valid transitions is needed \
        to complete the behavioral specification part of your design.\n\nTo \
        fix this, remove this transition by clicking on the transition in the \
        diagram and pressing the \"Ctrl-Delete\" key. You can also change the \
        transition's source or destination states.
critics.CrJoinIncomingTransition-head = Invalid source for transition
critics.CrLinkWithoutStimulus-desc = In sequence-diagrams a sender-object \
        sends stimuli\nto a receiving object over a link. The link is only the \
        communication-\nconnection, so a stimulus is needed.
critics.CrLinkWithoutStimulus-head = No Stimuli on These Links
critics.CrMergeClasses-desc = The highlighted class, <ocl>self</ocl>, only \
        participates in one association and that association is one-to-one \
        with another class.  Since instances of these two classes must always \
        be created together and destroyed together, combining these classes \
        might simplify your design without loss of any representation power. \
        However, you may find the combined class too large and complex, in \
        which case separating them is usually better.\n\nOrganizing classes to \
        manage complexity of the design is always important, especially when \
        the design is already complex. \n\nTo address this, click on the \
        \"Next>\" button, or manually add the attributes and operations of the \
        highlighted class to the other class, then remove the highlighted \
        class from the project.
critics.CrMergeClasses-head = Consider Combining Classes (<ocl>self</ocl>)
critics.CrMissingAttrName-desc = Every attribute must have a name. \n\nClear \
        and unambiguous naming is a key element in code generation and serves \
        to make the design more understandable and maintainable. \n\nTo \
        address this, use the \"Next>\" button, or manually select the \
        \nattribute and use the Properties tab to give it a name.
critics.CrMissingAttrName-head = Choose a Name
critics.CrMissingClassName-desc = Every class and interface within a package \
        must have a name. \n\nClear and unambiguous naming is a key element in \
        code generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the class and use the Properties tab to give it a name.
critics.CrMissingClassName-head = Choose a Name
critics.CrMissingOperName-desc = Every operation must have a name. \n\nClear \
        and unambiguous naming is a key element in code generation and serves \
        to make the design more understandable and maintainable. \n\nTo \
        address this, use the \"Next>\" button, or manually select the \
        \noperation and use the Properties tab to give it a name.
critics.CrMissingOperName-head = Choose a Name
critics.CrMissingStateName-desc = Every state within a state machine should \
        have a name. \n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the state and use the Properties tab to give it a \
        name, or select the state and type a name.
critics.CrMissingStateName-head = Choose a Name
critics.CrMultiComposite-desc = An instance may not belong by composition to \
        more than one composite instance. You must change the multiplicity at \
        the composite end of the association to either 0..1 or 1..1 (1) for \
        your model to make sense.\r\n\r\nRemember that composition is the \
        stronger aggregation kind and aggregation is the weaker. The problem \
        can be compared to a model where a finger can be an integral part of \
        several hands at the same time.\r\n\r\nThis is the second \
        well-formedness rule on AssociationEnd in UML 1.4.
critics.CrMultiComposite-head = Composite Association End with Multiplicity > 1
critics.CrMultipleAgg-desc = Only one end (role) of a binary Association can \
        be aggregate or composite.\n\nAggregation and composition are used to \
        indicate whole-part relationships and, by definition, the \"part\" end \
        cannot be aggregate.\n\nTo address this, select \"Next>\" to use the \
        wizard, or manually select the Association and set some of its role \
        aggregations to None.
critics.CrMultipleAgg-head = Two Aggregate Ends (Roles) in Binary Association
critics.CrMultipleDeepHistoryStates-desc = There are multiple, ambiguous deep \
        history states in this machine or composite state. Normally each state \
        machine or composite state has only one deep history state. \
        \n\nDefining unambiguous history states is needed to complete the \
        behavioral specification part of your design.\n\nTo fix this, select \
        one of the deep history states and delete it by pressing the \
        \"Ctrl-Delete\" key.
critics.CrMultipleDeepHistoryStates-head = Remove Extra Deep History States
critics.CrMultipleInheritance-desc = <ocl>self</ocl> has multiple base \
        classes, but Java does not support multiple inheritance.  You must use \
        interfaces instead. \n\nThis change is required before you can \
        generate Java code.\n\nTo address this, use the \"Next>\" button, or \
        manually (1) remove one of the base classes and then (2) optionally \
        define a new interface with the same method declarations and (3) add \
        it as an interface of <ocl>self</ocl>, and (4) move the method bodies \
        from the old base class down into <ocl>self</ocl>.
critics.CrMultipleInheritance-head = Change Multiple Inheritance to Interfaces
critics.CrMultipleInitialStates-desc = There are multiple, ambiguous initial \
        states in this machine or composite state. Normally each state machine \
        or composite state has one initial state. \n\nDefining unambiguous \
        states is needed to complete the behavioral specification part of your \
        design.\n\nTo address this, press the \"Next>\" button, or manually \
        select one of the extra initial states and remove it.
critics.CrMultipleInitialStates-head = Remove Extra Initial States
critics.CrMultipleRealization-desc = <ocl>self</ocl> implements multiple \
        interfaces. Though this is legal in UML this code will not compile in \
        Java. Replace the multiple realizations with generalizations if you \
        want to create compilable and error free code.
critics.CrMultipleRealization-head = Change Multiple Realization in \
        <ocl>self</ocl> to Generalizations
critics.CrMultipleShallowHistoryStates-desc = There are multiple, ambiguous \
        shallow history states in this machine or composite state. Normally \
        each state machine or composite state has only one shallow history \
        state. \n\nDefining unambiguous history states is needed to complete \
        the behavioral specification part of your design.\n\nTo fix this, \
        select one of the shallow history states and delete it by pressing the \
        \"Ctrl-Delete\" key.
critics.CrMultipleShallowHistoryStates-head = Remove Extra Shallow History \
        States
critics.CrNWayAgg-desc = Three-way (or more) Associations cannot have \
        aggregate ends (roles).\n\nAggregation and composition are used to \
        indicated whole-part relationships, and by definition can only apply \
        to binary associations between artifacts.\n\nTo address this, manually \
        select the Association and set the aggregation of each of its ends \
        (roles) to None.
critics.CrNWayAgg-head = Aggregate End (Role) in 3-Way (or more) Association
critics.CrNameConflict-desc = Names of contained elements in a namespace (e.g. \
        packages) must be unique. The element <ocl>self</ocl> violates this \
        condition. This condition does not apply for names of Associations or \
        Generalizations.
critics.CrNameConflict-head = Name Conflict Caused by <ocl>self</ocl>
critics.CrNameConflictAC-desc = Association role names of an AssociationClass \
        must not conflict \nwith the names of structural features (e.g., \
        instance variables) \nof the class.
critics.CrNameConflictAC-head = Role Name Conflicts with Member
critics.CrNameConfusion-desc = Names should be clearly distinct from each \
        other. These two names are so close to each other that readers might \
        be confused.\n\nClear and unambiguous naming is a key element in code \
        generation and serves to make the design more understandable and \
        maintainable. \n\nTo address this, use the \"Next>\" button, or \
        manually select the elements and use the Properties tab to change \
        their names.  Avoid names that differ from other names only in \
        capitalization, or use of underscore characters, or by only one \
        character.
critics.CrNameConfusion-head = Revise Name to Avoid Confusion
critics.CrNavFromInterface-desc = Associations involving an interface may not \
        be navigable in the direction from the interface.  This is a result of \
        the fact that interfaces contain only operation declarations and \
        cannot hold pointers to other objects.\n\nThis part of the design \
        should be changed before it is used to generate code.  Code generated \
        without addressing this problem will not match the intended \
        design.\n\nTo address this, select the association and use the \
        \"Properties\" tab to select in turn each association end that is NOT \
        connected to the interface. Uncheck \"Navigable\" for each of these \
        ends.\n\nThe association should then appear with a stick arrowhead \
        pointed towards the interface\n\nNOTE. ArgoUML should not permit \
        associations to be created that are navigable from \
        interfaces.\n\nWARNING. The current version of ArgoUML has a known \
        defect where it creates an association between a class and interface \
        that is either navigable in both directions, or navigable only from \
        the interface to the class. The fix is to remove the navigation from \
        the class end of the association and if necessary add navigation to \
        the interface end (navigation refers to navigability TOWARDS the end) \
        if this critic is triggered.
critics.CrNavFromInterface-head = Remove Navigation from Interface via \
        Association <ocl>self</ocl>
critics.CrNoAssociations-desc = You have not yet specified any Associations \
        for <ocl>self</ocl>. Normally classes, actors and use cases are \
        associated with others. \n\nDefining the associations between objects \
        an important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or add associations manually by clicking on the \
        association tool in the tool bar and dragging from <ocl>self</ocl> to \
        another node.
critics.CrNoAssociations-head = Add Associations to <ocl>self</ocl>
critics.CrNoGuard-desc = The highlighted Transposition is incomplete because \
        it has no guard condition.  Guard conditions must be true for the \
        transition to be taken.  If only a guard is used, the transition is \
        taken when the condition becomes true.\n\nThis problem must be \
        resolved to complete the state machine.\n\nTo address this, select the \
        Transition and use the \"Properties\" tab, or select the Transition \
        and type some text of the form:\n[GUARD]\nWhere GUARD is a boolean \
        expression.
critics.CrNoGuard-head = Add Guard to Transition
critics.CrNoIncomingTransitions-desc = State <ocl>self</ocl> has no incoming \
        transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design. Without \
        incoming transitions, this state can never be reached.\n\nTo address \
        this, press the \"Next>\" button, or add transitions manually by \
        clicking on transition tool in the tool bar and dragging from another \
        state to <ocl>self</ocl>.
critics.CrNoIncomingTransitions-head = Add Incoming Transitions to \
        <ocl>self</ocl>
critics.CrNoInitialState-desc = There is no initial state in this machine or \
        composite state. Normally each state machine or composite state has \
        one initial state. \n\nDefining unambiguous states is needed to \
        complete the behavioral specification part of your design.\n\nTo \
        address this, press the \"Next>\" button, or manually select initial \
        state from the tool bar and place it in the diagram.
critics.CrNoInitialState-head = Place an Initial State
critics.CrNoInstanceVariables-desc = You have not yet specified instance \
        variables for <ocl>self</ocl>. Normally classes have instance \
        variables that store state information for each instance. Classes that \
        provide only static attributes and methods should be stereotyped \
        <<utility>>.\n\nDefining instance variables is needed to complete the \
        information representation part of your design. \n\nTo address this, \
        press the \"Next>\" button, or add instance variables by double \
        clicking on <ocl>self</ocl> in the navigator pane and using the Create \
        menu to make a new attribute.
critics.CrNoInstanceVariables-head = Add Instance Variables to <ocl>self</ocl>
critics.CrNoOperations-desc = You have not yet specified operations for \
        <ocl>self</ocl>. Normally classes provide operations that define their \
        behavior. \n\nDefining operations is needed to complete the behavioral \
        specification part of your design. \n\nTo address this, press the \
        \"Next>\" button, or add operations manually by clicking on \
        <ocl>self</ocl> in the navigator pane and using the Create menu to \
        make a new operations.
critics.CrNoOperations-head = Add Operations to <ocl>self</ocl>
critics.CrNoOutgoingTransitions-desc = State <ocl>self</ocl> has no Outgoing \
        transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design.  Without \
        outgoing transitions, this state is a \"dead\" state that can never be \
        exited.\n\nTo address this, press the \"Next>\" button, or add \
        transitions manually by clicking on transition tool in the tool bar \
        and dragging from <ocl>self</ocl> to another state.
critics.CrNoOutgoingTransitions-head = Add Outgoing Transitions from \
        <ocl>self</ocl>
critics.CrNoTransitions-desc = State <ocl>self</ocl> has no Incoming or \
        Outgoing transitions. Normally states have both incoming and outgoing \
        transitions. \n\nDefining complete state transitions is needed to \
        complete the behavioral specification part of your design.  \n\nTo \
        address this, press the \"Next>\" button, or add transitions manually \
        by clicking on transition tool in the tool bar and dragging from \
        another state to <ocl>self</ocl> or from <ocl>self</ocl> to another \
        state.
critics.CrNoTransitions-head = Add Transitions to <ocl>self</ocl>
critics.CrNoTriggerOrGuard-desc = The highlighted Transition is incomplete \
        because it has no trigger or guard condition.  Triggers are events \
        that cause a transition to be taken.  Guard conditions must be true \
        for the transition to be taken.  If only a guard is used, the \
        transition is taken when the condition becomes true.\n\nThis problem \
        must be resolved to complete the state machine.\n\nTo address this, \
        select the Transition and use the \"Properties\" tab, or select the \
        Transition and type some text of the form:\nTRIGGER [GUARD] / \
        ACTION\nWhere TRIGGER is an event name, GUARD is a boolean expression, \
        and ACTION is an action to be performed when the Transition is taken.  \
        All three parts are optional.
critics.CrNoTriggerOrGuard-head = Add Trigger or Guard to Transition
critics.CrNodeInsideElement-desc = Nodes normally are not inside other \
        Elements. They represent\n run-time physical objects with a processing \
        resource, generally having\n at least a memory and often processing \
        capability as well.
critics.CrNodeInsideElement-head = Nodes Normally Have No Enclosers
critics.CrNodeInstanceInsideElement-desc = NodeInstances normally are not \
        inside other Elements. They represent\n run-time physical objects with \
        a processing resource, generally having\n at least a memory and often \
        processing capability as well.
critics.CrNodeInstanceInsideElement-head = NodeInstances Normally Have No \
        Enclosers
critics.CrNodesOverlap-desc = Some of the objects in this diagram overlap and \
        obscure each other. This may hide important information and make it \
        difficult for humans to understand. A neat appearance may also make \
        your diagrams more influential on other designers, implementers, and \
        decision makers.\n\nConstructing an understandable set of class \
        diagrams is an important part of your design. \n\nTo address this, \
        move the highlighted nodes in the diagram.
critics.CrNodesOverlap-head = Clean Up Diagram <ocl>self</ocl>
critics.CrNonAggDataType-desc = DataTypes are not full classes and cannot be \
        associated with classes, unless the DataType is part of a composite \
        (black diamond) aggregation. \n\nGood OO design depends on careful \
        choices about which entities to represent as full objects and which to \
        represent as attributes of objects.\n\nTo address this, use the \
        \"Next>\" button, or manually replace the DataType with a full class \
        or change the association aggregation to containment by a full class.
critics.CrNonAggDataType-head = Wrap DataType
critics.CrObjectWithoutComponent-desc = In Deployment-diagrams objects are \
        normally inside components or component-instances
critics.CrObjectWithoutComponent-head = Objects Normally Are Inside Components
critics.CrOperNameConflict-desc = Two operations in <ocl>self</ocl> have the \
        exact same signature.  Operations must have distinct signatures.  A \
        signature is the combination of the operation's name and parameter \
        types (excluding return parameters).\n\nAmbiguous signatures reduce \
        clarity and introduce the potential for incorrect processing.  \
        Futhermore generated code is not possible for mainstream OO \
        languages.\n\nTo address this, select the one of the conflicting \
        operations of this class and change its name or parameters.
critics.CrOperNameConflict-head = Change Operation Names or Signatures in \
        <ocl>self</ocl>
critics.CrOppEndConflict-desc = Two roles of <ocl>self</ocl> have the same \
        name. Roles must have distinct names. \n\nClear and unambiguous names \
        are key to code generation and producing an understandable and \
        maintainable design.\n\nTo address this, use the \"Next>\" button, or \
        manually select the one of the conflicting roles at the far end of an \
        association from this class and change its name.
critics.CrOppEndConflict-head = Rename Association Roles
critics.CrOppEndVsAttr-desc = Two attributes may not have the same name within \
        a Classifier.\n\nThis is the second well-formedness rule on Classifier \
        in UML 1.4.
critics.CrOppEndVsAttr-head = Rename Role or Attribute
critics.CrParamTypeNotImported-desc = The type of each operation parameter \
        must be visible and imported into the class that owns the \
        operation.\n\nImporting classes is needed for code generation. Good \
        modularization of classes into packages is key to an understandable \
        design.\n\nTo address this, use the \"Next>\" button, or manually add \
        an import to the class that owns this operation.
critics.CrParamTypeNotImported-head = Import Parameter Type into Class
critics.CrReservedName-desc = \"<ocl>self</ocl>\" is a reserved word or very \
        close to one.  The names of model elements must not conflict with \
        reserved words of programming languages or UML.\n\nUsing legal names \
        is needed to generate compilable code. \n\nTo address this, use the \
        \"Next>\" button, or manually select the highlighted element and use \
        the Properties tab to give it a different name.
critics.CrReservedName-head = Change <ocl>self</ocl> to a Non-Reserved Word
critics.CrReturnWithoutCall-desc = Every return-action requires a call- or \
        send-action,\n but this Link has no corresponding call- or send-action.
critics.CrReturnWithoutCall-head = Missing Call(Send)-Action
critics.CrSeqInstanceWithoutClassifier-desc = Instances have a classifier
critics.CrSeqInstanceWithoutClassifier-head = Set Classifier
critics.CrSingletonViolatedMissingStaticAttr-desc = <ocl>self</ocl> is marked \
        with the <<singleton>>; stereotype, but it does not satisfy the \
        constraints imposed on Singletons.\nIt does not have a static \
        attribute (a class variable) to hold the instance.\n\nWhenever you \
        mark a class with a stereotype, the class should satisfy all \
        constraints of the stereotype.  This is an important part of making a \
        self-consistent and understandable design. Using the Singleton Pattern \
        can save time and memory space.\n\nIf you no longer want this class to \
        be a Singleton, remove the <<singleton>> stereotype by clicking on the \
        class and selecting the blank selection on the stereotype drop-down \
        within the properties tab.\n
critics.CrSingletonViolatedMissingStaticAttr-head = Singleton Stereotype \
        Violated, Missing Static Attribute in <ocl>self</ocl>
critics.CrSingletonViolatedOnlyPrivateConstructors-desc = <ocl>self</ocl> is \
        marked with the <<singleton>>; stereotype, but it does not satisfy the \
        constraints imposed on Singletons.\nIt must have only private \
        constructors so that new instances cannot be made by other \
        code.\nWhenever you mark a class with a stereotype, the class should \
        satisfy all constraints of the stereotype.  This is an important part \
        of making a self-consistent and understandable design. Using the \
        Singleton Pattern can save time and memory space.\n\nIf you no longer \
        want this class to be a Singleton, remove the <<singleton>> stereotype \
        by clicking on the class and selecting the blank selection on the \
        stereotype drop-down within the properties tab.\n
critics.CrSingletonViolatedOnlyPrivateConstructors-head = Singleton Stereotype \
        Violated, Has Non-Private Constructor in <ocl>self</ocl>
critics.CrStimulusWithWrongPosition-desc = In sequence-diagrams the \
        sender-side of the communication-connections of these\nstimuli are \
        connected at the beginning of an activation. To be a sender an object \
        must\nhave a focus-of-control first.
critics.CrStimulusWithWrongPosition-head = Wrong Position of These Stimuli
critics.CrSubclassReference-desc = Class <ocl>self</ocl> has a reference to \
        one of it's subclasses. Normally all subclasses should be treated \
        \"equally\" by the superclass.  This allows for addition of new \
        subclasses without modification to the superclass. \n\nDefining the \
        associations between objects is an important part of your design.  \
        Some patterns of associations are easier to maintain than others, \
        depending on the nature of future changes. \n\nTo address this, press \
        the \"Next>\" button, or remove the association manually by clicking \
        on it in the diagram and pressing Delete.
critics.CrSubclassReference-head = Remove Reference to Specific Subclass
critics.CrTooManyAssoc-desc = There are too many Associations on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the associations between objects is an \
        important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove associations manually by clicking on an \
        association in the navigator pane or diagram and pressing the \"Del\" \
        key.
critics.CrTooManyAssoc-head = Reduce Associations on <ocl>self</ocl>
critics.CrTooManyAttr-desc = There are too many Attributes on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the attributes of objects is an important \
        part of your design. \n\nTo address this, press the \"Next>\" button, \
        or remove attributes manually by double-clicking on the attribute \
        compartment of the  highlighted class in the diagram and removing the \
        line of text for an attribute.
critics.CrTooManyAttr-head = Reduce Attributes on <ocl>self</ocl>
critics.CrTooManyClasses-desc = There are too many classes in <ocl>self</ocl>. \
        If one class diagram has too many classes it may become very difficult \
        for humans to understand. \n\nDefining an understandable set of class \
        diagrams is an important part of your design. \n\nTo address this, \
        press the \"Next>\" button, or remove classes manually by clicking on \
        a class in the navigator pane or diagram and pressing the \"Del\" key. \
         Or you can make a new diagram...
critics.CrTooManyClasses-head = Reduce Classes in Diagram <ocl>self</ocl>
critics.CrTooManyOper-desc = There are too many Operations on class \
        <ocl>self</ocl>.  Whenever one class becomes too central to the design \
        it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the operations of objects is an important \
        part of your design. \n\nTo address this, press the \"Next>\" button, \
        or remove operations manually by double-clicking on the operation \
        compartment of the  highlighted class in the diagram and removing the \
        line of text for an operation.
critics.CrTooManyOper-head = Reduce Operations on <ocl>self</ocl>
critics.CrTooManyStates-desc = There are too many States in <ocl>self</ocl>.  \
        If one state machine has too many states it may become very difficult \
        for humans to understand. \n\nDefining an understandable set of states \
        is an important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove states manually by clicking on a states in \
        the navigator pane or diagram and pressing the \"Del\" key.  Or you \
        can nest states...
critics.CrTooManyStates-head = Reduce States in Machine <ocl>self</ocl>
critics.CrTooManyTransitions-desc = There are too many Transitions on state \
        <ocl>self</ocl>.  Whenever one state becomes too central to the \
        machine it may become a maintenance bottleneck that must be updated \
        frequently. \n\nDefining the transitions between states is an \
        important part of your design. \n\nTo address this, press the \
        \"Next>\" button, or remove transitions manually by clicking on a \
        transition in the navigator pane or diagram and pressing the \"Del\" \
        key.
critics.CrTooManyTransitions-head = Reduce Transitions on <ocl>self</ocl>
critics.CrUnconventionalAttrName-desc = Normally attributes begin with a \
        lowercase letter. The name '<ocl>self</ocl>' is unconventional because \
        it does not.\n\nFollowing good naming conventions help to improve the \
        understandability and maintainability of the design. \n\nTo address \
        this, use the \"Next>\" button, or manually select <ocl>self</ocl> and \
        use the Properties tab to give it a different name.
critics.CrUnconventionalAttrName-head = Choose a Better Attribute Name
critics.CrUnconventionalClassName-desc = Normally classes begin with a capital \
        letter. The name '<ocl>self</ocl>' is unconventional because it does \
        not begin with a capital.\n\nFollowing good naming conventions help to \
        improve the understandability and maintainability of the design. \
        \n\nTo address this, use the \"Next>\" button, or manually select \
        <ocl>self</ocl> and use the Properties tab to give it a different name.
critics.CrUnconventionalClassName-head = Capitalize Class Name <ocl>self</ocl>
critics.CrUnconventionalOperName-desc = Normally operation names begin with a \
        lowercase letter. The name '<ocl>self</ocl>' is unconventional because \
        it does not.\n\nFollowing good naming conventions help to improve the \
        understandability and maintainability of the design. \n\nTo address \
        this, use the \"Next>\" button, or manually select <ocl>self</ocl> and \
        use the Properties tab to give it a new name.
critics.CrUnconventionalOperName-head = Choose a Better Operation Name
critics.CrUnconventionalPackName-desc = Normally package names are written in \
        all lower case with periods used to indicate \"nested\" packages.  The \
        name '<ocl>self</ocl>' is unconventional because it is not all lower \
        case with periods.\n\nFollowing good naming conventions help to \
        improve the understandability and maintainability of the design. \
        \n\nTo address this, use the \"Next>\" button, or manually select \
        <ocl>self</ocl> and use the Properties tab to give it a different name.
critics.CrUnconventionalPackName-head = Revise Package Name <ocl>self</ocl>
critics.CrUnnavigableAssoc-desc = The Association <ocl>self</ocl> is not \
        navigable in any direction. All associations should be navigable at \
        least one way.\n\nSetting the navigability of associations allows your \
        code to access data by following pointers. \n\nTo address this, select \
        association \"<ocl>self</ocl>\" in the diagram or navigator panel and \
        click the properties tab.  Then use the checkboxes at the bottom of \
        the properties panel to turn on navigability.
critics.CrUnnavigableAssoc-head = Make <ocl>self</ocl> Navigable
critics.CrUselessAbstract-desc = <ocl>self</ocl> can never influence the \
        running system because it can never have any instances, and none of \
        its subclasses can have instances either. \n\nTo address this problem: \
        (1) define concrete subclasses that implement the interface of this \
        class; or (2) make <ocl>self</ocl> or one of its existing subclasses \
        concrete.
critics.CrUselessAbstract-head = Define Concrete (Sub)Class
critics.CrUselessInterface-desc = <ocl>self</ocl> can never be used because no \
        classes implement it.\n\nTo address this problem, press the \"Next>\" \
        button or manually use the toolbar \"Class\" button to define classes \
        and the \"Realizes\" button to make a relationship from the class to \
        the highlighted interface.
critics.CrUselessInterface-head = Define Class to Implement <ocl>self</ocl>
critics.CrUtilityViolated-desc = <ocl>self</ocl> is marked with the \
        <<utility>>; stereotype, but it does not satisfy the constraints \
        imposed on Utilities.\nIt does have instance attributes, variables or \
        operations.\n\nIf you no longer wants this class to be a Utility, \
        remove the <<utility>> stereotype by clicking on the class and \
        selecting the blank selection on the stereotype drop-down within the \
        properties tab.\n
critics.CrUtilityViolated-head = Utility Stereotype Violated, Instances Can Be \
        Created.
critics.CrWrongLinkEnds-desc = In deployment-diagrams objects can reside \
        either on components\n or on component-instances. So it is not \
        possible to have two objects\n connected with a Link, while one object \
        resides on an component and\n an the other object on a \
        component-instance.\n\n\n To address this remove one object of the two \
        connected objects from its location to an element that has the\n same \
        type as the location of the other object
critics.CrWrongLinkEnds-head = LinkEnds Don't Have The Same Locations
critics.CrZeroLengthEdge-desc = This edge is too small to see easily. This may \
        hide important information and make it difficult for humans to \
        understand. A neat appearance may also make your diagrams more \
        influential on other designers, implementers, and decision \
        makers.\n\nConstructing an understandable set of diagrams is an \
        important part of your design. \n\nTo address this, move one or more \
        nodes so that the highlighted edges will be longer, or click in the \
        center of the edge and drag to make a new vertex.
critics.CrZeroLengthEdge-head = Make Edge More Visible
